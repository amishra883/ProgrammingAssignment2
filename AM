makeCacheMatrix <- function(x = matrix()) {
    i <- NULL
    set <- function(y) {
        x <<- y
        i <<- NULL
    }
    get <- function() x
    setinverse <- function(inverse) i <<- inverse
    getinverse <- function() i
    list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}

# Previous function returns the inverse of the matrix. Initially the function checks if
# inverse has already been computed and if it has, it gets the result. If not, inverse is 
# computed and sets value in the cache using the set inverse function. 


# This function assumes that the matrix is always invertible.
cacheSolve <- function(x, ...) {
    i <- x$getinverse()
    if(!is.null(i)) {
        message("getting cached data.")
        return(i)
    }
    data <- x$get()
    i <- solve(data)
    x$setinverse(i)
    i
}

## Testing
> A<- matrix(c(1,2,3,4),2,2)
> A1<- makeCacheMatrix(A)
> cacheSolve(A1)
      [,1] [,2]
 [1,]   -2  1.5
 [2,]    1 -0.5
## Not cache data 

> cacheSolve(A1)
      [,1] [,2]
 [1,]   -2  1.5
 [2,]    1 -0.5
 
 ## Second run returns cached data
